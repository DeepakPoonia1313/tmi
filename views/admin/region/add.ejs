<%- include('../layout/header') %>
    <%- include('../layout/sidebar') %>
        <div class="container mt-4">
            <!-- Enhanced Breadcrumb -->
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb p-3 bg-light rounded-3">
                    <% breadcrumbs.forEach((crumb, index)=> { %>
                        <% if (crumb.url && index !==breadcrumbs.length - 1) { %>
                            <li class="breadcrumb-item">
                                <a href="<%= crumb.url %>" class="text-decoration-none text-primary">

                                    <%= crumb.label %>
                                </a>
                            </li>
                            <% } else { %>
                                <li class="breadcrumb-item active" aria-current="page">
                                    <%= crumb.label %>
                                </li>
                                <% } %>
                                    <% }) %>
                </ol>
            </nav>

            <!-- Card with improved styling -->
            <div class="card border-0 shadow-lg">
                <div class="card-header text-black py-3">
                    <div class="d-flex align-items-center">
                        <h5 class="mb-0 fw-bold">Add New Region</h5>
                    </div>
                </div>

                <div class="card-body p-4">
                    <form action="/admin/region/add?module=region&moduleId=region" method="POST"
                        enctype="multipart/form-data">
                        <!-- Name -->
                        <div class="mb-4">
                            <label class="form-label fw-semibold text-muted">Region Name</label>
                            <div class="input-group">
                                <input name="name" id="name" class="form-control form-control-lg" maxlength="50"
                                    required placeholder="Enter region name" />
                            </div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label fw-semibold text-muted">Slug <span
                                    class="text-danger">*</span></label>
                            <div class="input-group">
                                <input type="text" name="slug" id="slug" class="form-control form-control-lg" required
                                    placeholder="Enter slug" />
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label fw-semibold text-muted">Description</label>
                            <div class="input-group">

                                <textarea name="description" class="form-control" rows="3" required
                                    placeholder="Brief description of the region"></textarea>
                            </div>
                        </div>

                        <!-- Image Upload -->
                        <!-- <div class="mb-5 mt-5" style="border: 2px solid black;" id="image-upload-wrapper">
                            <label class="form-label fw-semibold text-muted">Region Image</label>
                            <div class="card border-dashed">
                                <div class="card-body text-center">
                                    <div class="d-flex flex-column align-items-center">
                                        <div class="w-100">
                                            <img id="image-preview" src="#" alt="Preview"
                                                class="img-fluid rounded-3 shadow-sm d-none mb-3"
                                                style="max-height: 250px; object-fit: cover;" />
                                        </div>

                                        <input type="file" name="image" accept="image/*" class="d-none" id="file-upload"
                                            onchange="previewImage(event)" />
                                        <label for="file-upload" class="btn btn-outline-primary mb-3"
                                            id="image-upload-label">
                                            Choose Image
                                        </label>

                                        <small class="text-muted mt-2" id="image-error-message">
                                            Upload a high-quality image of the region
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div> -->

                        <div class="mb-5 border border-2 border-dark rounded-3 p-3" id="image-upload-wrapper">
                            <label class="form-label fw-semibold text-muted mb-3">Region Image</label>
                            <div class="card border border-2 border-dashed">
                                <div class="card-body text-center p-4">
                                    <div class="d-flex flex-column align-items-center justify-content-center">
                                        <div class="w-100 mb-3">
                                            <img id="image-preview" src="#" alt="Preview"
                                                class="img-fluid rounded-3 shadow-sm d-none mx-auto"
                                                style="max-height: 250px; object-fit: cover;" />
                                        </div>

                                        <input type="file" name="image" accept="image/*" class="d-none" id="file-upload"
                                            onchange="previewImage(event)" />
                                        <label for="file-upload" class="btn btn-outline-primary px-4"
                                            id="image-upload-label">
                                            Choose Image
                                        </label>

                                        <small class="text-muted mt-3" id="image-error-message">
                                            Upload a high-quality image of the region
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="editor-container mb-3">
                            <div class="row">
                                <div class="col-12">
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Content</label>
                                        <textarea id="editor" name="content" class="form-control"
                                            style="min-height: 300px;"></textarea>
                                    </div>
                                </div>
                            </div>

                        
                            <div class="row mt-3 mb-5 border border-2 border-dark rounded-3">
                                <div class="col-12">
                                    <div class="gallery-section p-3">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h5 class="mb-0">Gallery</h5>
                                            <button type="button" class="btn btn-primary btn-sm"
                                                id="gallery-image-button">
                                                Add
                                            </button>
                                        </div>

                                        <div class="mt-4 mb-5 overflow-y-auto overflow-x-hidden"
                                            style="max-height: 350px;">
                                            <% if (images && images.length> 0) { %>
                                                <div class="row g-3 pe-2"> <!-- Added pe-2 for right padding -->
                                                    <% images.reverse().forEach((image, index)=> { %>
                                                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                                                            <div class="card h-100 mt-4 shadow-sm">
                                                                <div class="card-img-top d-flex justify-content-center align-items-center p-2"
                                                                    style="height: 150px;">
                                                                    <img src="<%= image %>" alt="Uploaded Image"
                                                                        class="img-fluid rounded cursor-pointer"
                                                                        style="max-height: 100%; width: auto;"
                                                                        onclick="insertToEditor('<%= image %>')" />
                                                                </div>
                                                                <div class="card-body p-2">
                                                                    <div
                                                                        class="d-flex justify-content-between align-items-center">
                                                                        <small class="text-muted text-truncate me-2"
                                                                            style="max-width: 70%;">
                                                                            Image <%= index + 1 %>
                                                                        </small>
                                                                        <button
                                                                            class="btn btn-sm btn-outline-secondary copy-url-btn"
                                                                            data-url="<%= image %>" title="Copy URL">
                                                                            <i class="bi bi-clipboard"></i>
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <% }) %>
                                                </div>
                                                <% } else { %>
                                                    <div class="text-center py-3">
                                                        <p class="text-muted">No previously uploaded images.</p>
                                                    </div>
                                                    <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>



                        <!-- SEO Section -->
                        <div class="card mb-4 border-primary">
                            <div class="card-header bg-light">
                                <h6 class="mb-0 text-primary">SEO Settings</h6>
                            </div>
                            <div class="card-body">
                                <!-- Meta Title -->
                                <div class="mb-3">
                                    <label class="form-label fw-semibold text-muted">Meta Title</label>
                                    <input name="meta_title" class="form-control"
                                        placeholder="Optimized title for search engines" />
                                </div>

                                <!-- Meta Description -->
                                <div class="mb-3">
                                    <label class="form-label fw-semibold text-muted">Meta Description</label>
                                    <textarea name="meta_description" class="form-control" rows="2"
                                        placeholder="Brief summary for search results"></textarea>

                                </div>

                                <!-- Canonical Url -->
                                <div class="mb-3">
                                    <label class="form-label fw-semibold text-muted">Canonical Url</label>
                                    <!-- <textarea name="canonical_url" class="form-control" rows="2"
                                        placeholder="Brief summary for search results"></textarea> -->
                                    <input type="url" name="canonical_url" class="form-control"
                                        placeholder="Canonical URL" />
                                </div>
                            </div>


                        </div>
                        <!-- <div class="row mt-2">
                            <div class="col-md-6">
                                <label for="featuredPackages">Featured Packages</label>
                                <select id="featuredPackages" class="form-control" multiple></select>

                                <div id="selectedPackagesContainer" class="mt-3 d-flex flex-column gap-2"></div>

                                <input type="hidden" name="featured_packages" id="featuredPackagesInput">

                            </div>
                        </div> -->
                        <!-- Submit Button -->
                        <div class="row mt-2">
                            <div class="col-md-6">
                                <!-- Select2 Multi-select -->
                                <label for="featuredPackages">Featured Packages</label>
                                <select id="featuredPackages" class="form-control" multiple></select>

                                <!-- Container to show selected packages -->
                                <div id="selectedPackagesContainer" class="mt-3">
                                    <div class="selected-packages-list"></div>
                                </div>

                                <!-- Hidden input to store selected data for form submission -->
                                <input type="hidden" name="featured_packages" id="featuredPackagesInput">
                            </div>
                        </div>
                        <div class="d-flex justify-content-between mt-4">
                            <button type="reset" class="btn btn-outline-secondary px-4">
                                Reset
                            </button>
                            <button type="submit" class="btn btn-success px-4">
                                Save Region
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Optional: Add some custom CSS for better visual effects -->
        <style>
            .border-dashed {
                border: 2px dashed #dee2e6;
            }

            .card-header {
                border-bottom: none;
            }

            .form-control:focus,
            .form-select:focus {
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.1);
            }

            #file-upload+label {
                cursor: pointer;
                transition: all 0.3s;
            }

            #file-upload+label:hover {
                transform: translateY(-2px);
            }
        </style>


        <!-- package order selection -->
        <!-- <script>
            let selectedPackages = [];

            // Initialize Select2 with AJAX search
            $('#featuredPackages').select2({
                placeholder: 'Search and select packages',
                ajax: {
                    url: '/admin/api/packages',
                    dataType: 'json',
                    delay: 250,
                    data: params => ({ q: params.term }),
                    processResults: data => ({
                        results: data.results
                    }),
                    cache: true
                },
                minimumInputLength: 2,
                width: '100%'
            });

            // Handle selection
            $('#featuredPackages').on('select2:select', function (e) {
                const pkg = e.params.data;

                // Avoid duplicates
                if (!selectedPackages.find(p => p.id === pkg.id)) {
                    selectedPackages.push({ ...pkg, order_number: selectedPackages.length + 1 });
                    renderSelectedPackages();
                }

                // Clear selection from select2 (we manage display manually)
                $(this).val(null).trigger('change');
            });

            // Render selected packages
            function renderSelectedPackages() {
                const container = document.getElementById('selectedPackagesContainer');
                container.innerHTML = '';

                selectedPackages.forEach((pkg, index) => {
                    const div = document.createElement('div');
                    div.className = 'd-flex align-items-center justify-content-between p-2 border rounded bg-light';

                    div.innerHTML = `
        <div>
          <strong>${pkg.text}</strong> (Order: ${index + 1})
          <br>
          <img src="${pkg.img}" alt="${pkg.text}" style="max-width: 50px; max-height: 50px; object-fit: cover;" class="img-thumbnail mt-1">
        </div>
        <div>
          <button class="btn btn-sm btn-outline-secondary me-2" onclick="movePackage(${index}, -1)">↑</button>
          <button class="btn btn-sm btn-outline-secondary me-2" onclick="movePackage(${index}, 1)">↓</button>
          <button class="btn btn-sm btn-danger" onclick="removePackage(${index})">Remove</button>
        </div>
      `;

                    container.appendChild(div);
                });

                // Update hidden input
                document.getElementById('featuredPackagesInput').value = JSON.stringify(
                    selectedPackages.map((pkg, index) => ({
                        package_id: pkg.id,
                        order_number: index + 1
                    }))
                );
            }

            function removePackage(index) {
                selectedPackages.splice(index, 1);
                renderSelectedPackages();
            }

            function movePackage(index, direction) {
                const newIndex = index + direction;
                if (newIndex < 0 || newIndex >= selectedPackages.length) return;

                const temp = selectedPackages[index];
                selectedPackages[index] = selectedPackages[newIndex];
                selectedPackages[newIndex] = temp;

                renderSelectedPackages();
            }
        </script> -->

        <style>
            .selected-packages-list {
                display: flex;
                flex-direction: column;
                gap: 12px;
            }

            .package-card {
                display: flex;
                align-items: center;
                padding: 12px;
                border-radius: 8px;
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                transition: all 0.2s;
            }

            .package-card:hover {
                background: #e9ecef;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }

            .package-image {
                width: 60px;
                height: 60px;
                object-fit: cover;
                border-radius: 4px;
                margin-right: 15px;
            }

            .package-info {
                flex: 1;
            }

            .package-title {
                font-weight: 600;
                margin-bottom: 4px;
            }

            .package-meta {
                font-size: 0.85rem;
                color: #6c757d;
            }

            .package-actions {
                display: flex;
                gap: 8px;
            }

            .order-badge {
                background: #0d6efd;
                color: white;
                padding: 3px 8px;
                border-radius: 10px;
                font-size: 0.75rem;
                font-weight: 600;
            }
        </style>

        <script>
            let selectedPackages = [];

            // Initialize Select2 with AJAX search
            $('#featuredPackages').select2({
                placeholder: 'Search and select packages',
                ajax: {
                    url: '/admin/api/packages',
                    dataType: 'json',
                    delay: 250,
                    data: params => ({ q: params.term }),
                    processResults: data => ({
                        results: data.results
                    }),
                    cache: true
                },
                minimumInputLength: 2,
                width: '100%'
            });

            // Handle selection
            $('#featuredPackages').on('select2:select', function (e) {
                const pkg = e.params.data;

                // Avoid duplicates
                if (!selectedPackages.find(p => p.id === pkg.id)) {
                    selectedPackages.push({ ...pkg, order_number: selectedPackages.length + 1 });
                    renderSelectedPackages();
                }

                // Clear selection from select2 (we manage display manually)
                $(this).val(null).trigger('change');
            });

            // Render selected packages
            function renderSelectedPackages() {
                const container = document.querySelector('.selected-packages-list');
                container.innerHTML = '';

                selectedPackages.forEach((pkg, index) => {
                    const card = document.createElement('div');
                    card.className = 'package-card';

                    card.innerHTML = `
                <img src="${pkg.img}" alt="${pkg.text}" class="package-image">
                <div class="package-info">
                    <div class="package-title">${pkg.text}</div>
                    <div class="package-meta">
                        <span class="order-badge">Order #${index + 1}</span>
                        ${pkg.price ? `<span class="ms-2">Price: $${pkg.price}</span>` : ''}
                    </div>
                </div>
                <div class="package-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="movePackage(${index}, -1)" ${index === 0 ? 'disabled' : ''}>
                        <i class="fas fa-arrow-up"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-primary" onclick="movePackage(${index}, 1)" ${index === selectedPackages.length - 1 ? 'disabled' : ''}>
                        <i class="fas fa-arrow-down"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="removePackage(${index})">
                        Remove
                    </button>
                </div>
            `;

                    container.appendChild(card);
                });

                // Update hidden input
                document.getElementById('featuredPackagesInput').value = JSON.stringify(
                    selectedPackages.map((pkg, index) => ({
                        package_id: pkg.id,
                        order_number: index + 1
                    }))
                );
            }

            function removePackage(index) {
                selectedPackages.splice(index, 1);
                renderSelectedPackages();
            }

            function movePackage(index, direction) {
                const newIndex = index + direction;
                if (newIndex < 0 || newIndex >= selectedPackages.length) return;

                const temp = selectedPackages[index];
                selectedPackages[index] = selectedPackages[newIndex];
                selectedPackages[newIndex] = temp;

                renderSelectedPackages();
            }
        </script>
        
        <script>
            function previewImage(event) {
                const preview = document.getElementById('image-preview');
                const icon = document.getElementById('upload-icon');
                const file = event.target.files[0];

                if (file) {
                    preview.src = URL.createObjectURL(file);
                    preview.classList.remove('d-none');
                    clearImageValidation(); // Clear validation styles
                    if (icon) {
                        icon.classList.add('d-none'); // Hide the cloud icon
                    }
                }
            }

            function clearImageValidation() {
                document.getElementById('image-upload-label').classList.remove('border', 'border-danger');
                document.getElementById('image-error-message').classList.remove('text-danger');
            }

            function showImageValidation() {
                document.getElementById('image-upload-label').classList.add('border', 'border-danger');
                document.getElementById('image-error-message').classList.add('text-danger');
            }

            document.querySelector('form').addEventListener('submit', function (e) {
                const fileInput = document.getElementById('file-upload');

                if (!fileInput.files || fileInput.files.length === 0) {
                    e.preventDefault();
                    showImageValidation();
                    fileInput.focus(); // makes it focusable, if browser allows
                } else {
                    clearImageValidation();
                }
            });
        </script>

        <!-- <script>
            document.addEventListener('DOMContentLoaded', () => {
                const editor = Jodit.make('#editor', {
                    height: 500,
                    buttons: [
                        'bold', 'italic', 'underline', '|',
                        'ul', 'ol', '|',
                        'align', '|',
                        'image', 'link', '|',
                        'undo', 'redo', '|',
                        'source',
                        'table',
                        'code',
                        'video',
                        'hr',
                        'fullsize', 'print',
                        'selectall', 'cut', 'copy', 'paste'
                    ],

                });

                // Define insertToEditor globally
                window.insertToEditor = function (imageUrl) {
                    editor.selection.insertHTML(`<img style="max-width: 300px;" src="${imageUrl}" />`);
                };

                // Upload image manually from 'Add' button
                document.getElementById('gallery-image-button').addEventListener('click', () => {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/*';
                    input.click();

                    input.onchange = async () => {
                        const file = input.files[0];
                        const formData = new FormData();
                        formData.append('image', file);

                        try {
                            const res = await fetch('/upload/region/content', {
                                method: 'POST',
                                body: formData,
                            });

                            if (!res.ok) throw new Error('Upload failed');

                            const data = await res.json();
                            const url = data.file;

                            // Insert into editor
                            editor.selection.insertHTML(`<img style="max-width: 300px;" src="${url}" />`);

                            // Add to gallery (if gallery row exists)
                            const row = document.querySelector('.gallery-section .row.g-3');
                            if (row) {
                                const colDiv = document.createElement('div');
                                colDiv.className = 'col-12 col-sm-6 col-md-4 col-lg-2 d-flex justify-content-center';

                                const img = document.createElement('img');
                                img.src = url;
                                img.alt = 'Uploaded Image';
                                img.className = 'img-fluid rounded selectable-image border border-secondary';
                                img.style.cssText = 'max-width: 100%; max-height: 120px; height: auto; cursor: pointer; padding: 2px;';
                                img.setAttribute('onclick', `insertToEditor('${url}')`);

                                colDiv.appendChild(img);
                                row.prepend(colDiv);
                            }
                        } catch (err) {
                            console.error('Image upload failed', err);
                        }
                    };
                });
            });
        </script> -->
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const btns = [
                    "bold", "italic", "underline", "strikethrough", "eraser", "ul", "ol",
                    "fontsize", "paragraph", "superscript", "subscript", "image", "video", "cut", "copy", "paste", "copyformat",
                    "hr", "table", "link", "left", "center", "right", "indent", "source", "file", "spellcheck", "fullsize",
                    "undo", "redo", "print", "selectall", "code"
                ];

                const editor = Jodit.make('#editor', {
                    height: 500,
                    buttons: btns,
                    toolbarAdaptive: false,
                    defaultActionOnPaste: "insert_clear_html"
                });

                // Add 'img-fluid' class to inserted <img> tags on content change
                editor.events.on('change', function (text) {
                    const parser = new DOMParser();
                    const htmlDoc = parser.parseFromString(text, 'text/html');
                    const imgs = htmlDoc.getElementsByTagName('img');
                    if (imgs) {
                        for (const img of imgs) {
                            if (!img.classList.contains('img-fluid')) {
                                img.classList.add('img-fluid');
                            }
                        }
                    }
                    text = htmlDoc.body.innerHTML;
                });

                // Override insertHTML to sanitize HTML using DOMPurify
                editor.selection.originalInsertHTML = editor.selection.insertHTML;
                editor.selection.insertHTML = html => {
                    var clean = DOMPurify.sanitize(html, {
                        ALLOWED_ATTR: ['src', 'href', 'target', 'class'],
                        ALLOWED_TAGS: [
                            'p', 'strong', 'ul', 'ol', 'li', 'i', 'u', 's', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
                            'quote', 'pre', 'sup', 'sub', 'img', 'table', 'colgroup', 'col', 'tr', 'td', 'tbody', 'thead',
                            'iframe', 'b', 'a'
                        ]
                    });
                    return editor.selection.originalInsertHTML(clean);
                };

                // Define insertToEditor globally
                window.insertToEditor = function (imageUrl) {
                    editor.selection.insertHTML(`<img class="img-fluid" style="max-width: 300px;" src="${imageUrl}" />`);
                };

                // Upload image manually from 'Add' button
                document.getElementById('gallery-image-button').addEventListener('click', () => {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/*';
                    input.click();

                    input.onchange = async () => {
                        const file = input.files[0];
                        const formData = new FormData();
                        formData.append('image', file);

                        try {
                            const res = await fetch('/upload/region/content', {
                                method: 'POST',
                                body: formData,
                            });

                            if (!res.ok) throw new Error('Upload failed');

                            const data = await res.json();
                            const url = data.file;

                            // Insert into editor
                            editor.selection.insertHTML(`<img class="img-fluid" style="max-width: 300px;" src="${url}" />`);

                            // Add to gallery (if gallery row exists)
                            const row = document.querySelector('.gallery-section .row.g-3');
                            if (row) {
                                const colDiv = document.createElement('div');
                                colDiv.className = 'col-12 col-sm-6 col-md-4 col-lg-2 d-flex justify-content-center';

                                const img = document.createElement('img');
                                img.src = url;
                                img.alt = 'Uploaded Image';
                                img.className = 'img-fluid rounded selectable-image border border-secondary';
                                img.style.cssText = 'max-width: 100%; max-height: 120px; height: auto; cursor: pointer; padding: 2px;';
                                img.setAttribute('onclick', `insertToEditor('${url}')`);

                                colDiv.appendChild(img);
                                row.prepend(colDiv);
                            }
                        } catch (err) {
                            console.error('Image upload failed', err);
                        }
                    };
                });
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.copy-url-btn').forEach(button => {
                    button.addEventListener('click', async function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        try {
                            const url = this.getAttribute('data-url');
                            await navigator.clipboard.writeText(url);

                            // Create and show a tooltip instead of changing icon
                            const tooltip = new bootstrap.Tooltip(this, {
                                title: 'Copied!',
                                trigger: 'manual'
                            });
                            tooltip.show();

                            setTimeout(() => {
                                tooltip.hide();
                                // Destroy the tooltip after hiding
                                setTimeout(() => tooltip.dispose(), 100);
                            }, 2000);

                        } catch (err) {
                            console.error('Failed to copy URL: ', err);
                        }

                        this.blur();
                    });
                });
            });
        </script>
        <script>
            document.getElementById('name').addEventListener('input', function () {
                const slug = this.value
                    .toLowerCase()
                    .replace(/[^a-z0-9]+/g, '-')
                    .replace(/(^-|-$)/g, '');
                document.getElementById('slug').value = slug;
            });
        </script>

        <%- include('../layout/footer') %>